services:
  
  # fastapi app
  fastapi:
    build:
      context: ..
      dockerfile: docker/ragapp/Dockerfile
    container_name: fastapi
    ports:
      - "8000:8000"
    volumes:
      - fastapi_data:/app/assets
    depends_on:
      mongodb:
        condition: service_healthy
    env_file:
      - ./env/.env.app
    networks:
      - backend
    restart: always

  # MongoDB
  mongodb:
    image: mongo:8.0-rc-noble
    container_name: mongodb
    ports:
      - "27007:27017"
    volumes:
      - mongodb:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - backend

    restart: always

  # Qdrant
  qdrant:
    image: qdrant/qdrant:v1.14.0
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_db:/qdrant/storage
    networks:
      - backend
    restart: always

  # Prometheus
  prometheus:
    image: prom/prometheus:v3.3.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - backend
    restart: always

  # Grafana
  grafana:
    image: grafana/grafana:11.6.0-ubuntu
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    env_file:
      - ./env/.env.grafana
    depends_on:
      - prometheus
    networks:
      - backend
    restart: always

  # Node exporter for prometheus
  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - backend
    restart: always

  # Nginx
  nginx:
    image: nginx:stable-alpine3.21-perl
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - fastapi
    networks:
      - backend
    restart: always



networks:
  backend:
    driver: bridge

volumes:
  mongodb:
  qdrant_db:
  prometheus_data:
  grafana_data:
  fastapi_data:
  